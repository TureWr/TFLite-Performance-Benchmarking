// Generated by view binder compiler. Do not edit!
package org.tensorflow.lite.examples.imageclassification.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatSpinner;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.tensorflow.lite.examples.imageclassification.R;

public final class InfoBottomSheetBinding implements ViewBinding {
  @NonNull
  private final NestedScrollView rootView;

  @NonNull
  public final Button anomalyBenchmarkButton;

  @NonNull
  public final TextView anomalyResults;

  @NonNull
  public final Button benchmarkButton;

  @NonNull
  public final TextView benchmarkResults;

  @NonNull
  public final NestedScrollView bottomSheetLayout;

  @NonNull
  public final AppCompatSpinner spinnerDelegate;

  @NonNull
  public final AppCompatSpinner spinnerModel;

  private InfoBottomSheetBinding(@NonNull NestedScrollView rootView,
      @NonNull Button anomalyBenchmarkButton, @NonNull TextView anomalyResults,
      @NonNull Button benchmarkButton, @NonNull TextView benchmarkResults,
      @NonNull NestedScrollView bottomSheetLayout, @NonNull AppCompatSpinner spinnerDelegate,
      @NonNull AppCompatSpinner spinnerModel) {
    this.rootView = rootView;
    this.anomalyBenchmarkButton = anomalyBenchmarkButton;
    this.anomalyResults = anomalyResults;
    this.benchmarkButton = benchmarkButton;
    this.benchmarkResults = benchmarkResults;
    this.bottomSheetLayout = bottomSheetLayout;
    this.spinnerDelegate = spinnerDelegate;
    this.spinnerModel = spinnerModel;
  }

  @Override
  @NonNull
  public NestedScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static InfoBottomSheetBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static InfoBottomSheetBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.info_bottom_sheet, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static InfoBottomSheetBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.anomalyBenchmarkButton;
      Button anomalyBenchmarkButton = ViewBindings.findChildViewById(rootView, id);
      if (anomalyBenchmarkButton == null) {
        break missingId;
      }

      id = R.id.anomalyResults;
      TextView anomalyResults = ViewBindings.findChildViewById(rootView, id);
      if (anomalyResults == null) {
        break missingId;
      }

      id = R.id.benchmark_button;
      Button benchmarkButton = ViewBindings.findChildViewById(rootView, id);
      if (benchmarkButton == null) {
        break missingId;
      }

      id = R.id.benchmark_results;
      TextView benchmarkResults = ViewBindings.findChildViewById(rootView, id);
      if (benchmarkResults == null) {
        break missingId;
      }

      NestedScrollView bottomSheetLayout = (NestedScrollView) rootView;

      id = R.id.spinner_delegate;
      AppCompatSpinner spinnerDelegate = ViewBindings.findChildViewById(rootView, id);
      if (spinnerDelegate == null) {
        break missingId;
      }

      id = R.id.spinner_model;
      AppCompatSpinner spinnerModel = ViewBindings.findChildViewById(rootView, id);
      if (spinnerModel == null) {
        break missingId;
      }

      return new InfoBottomSheetBinding((NestedScrollView) rootView, anomalyBenchmarkButton,
          anomalyResults, benchmarkButton, benchmarkResults, bottomSheetLayout, spinnerDelegate,
          spinnerModel);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
